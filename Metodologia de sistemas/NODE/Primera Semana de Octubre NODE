8.1 Creando Asincronía con el set timeout

function soyAsincrona(){
  console.log("Hola, soy una funcion asincrona");
}

console.log("iniciando el proceso...");
soyAsincrona();
console.log("Terminando el proceso...");

--------------------------------------------------------------------------------------------------

8.2 Generación de un callback. Ultimas pruebas

function soyAsincrona(){
  setTimeout( function (miCallback) {
    console.log("Hola, soy una funcion asincrona");
  }, 1000);
}

console.log("iniciando el proceso...");
soyAsincrona(function() {
  console.log("Terminando el proceso...");
});

----------------------------------------------------------------------------------------------------
8.3 Generamos un callback

function soyAsincrona(miCallback){
  setTimeout( function (miCallback) {
    console.log("Hola, soy una funcion asincrona");
    miCallback();
  }, 1000);
}

console.log("iniciando el proceso...");
soyAsincrona(function() {
  console.log("Terminando el proceso...");
});

-----------------------------------------------------------------------------------------------------
8.4 Hacemos cambios hacía un algoritmo más complejo

function hola(nombre, miCallback){
  setTimeout( function (miCallback) {
    console.log("Hola "+nombre);
    miCallback();
  }, 1000);
}

function adios(nombre, otroCallback) {
  setTimeout( function() {
    console.log("Adios", nombre);
    otroCallback();
  }, 1000);
}    

console.log("iniciando el proceso...");
hola("Carlos", function() {
  adios("Carlos", function(){
    console.log("Terminando el proceso...");
  })  ;
});

--------------------------------------------------------------------------------------------------
8.5
