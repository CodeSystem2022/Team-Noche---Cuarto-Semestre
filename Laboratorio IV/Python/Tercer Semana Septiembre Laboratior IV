#5.1 documentación 
#marino alfredo 
class MiClase:
    """
    Este es un ejemplo de la documentacion de
    esta clase.
    es solo para saber que aqui esta MiClase
    """

    def __int__(self):  # Creamos el metodo
        """
        Aqui esta el metodo dunder init
        Este metodo es el de inicio
        para esta clase
        """

    def mi_metodo(self, param1, param2):  # Creamos metodo
        """
        Este es el metodo creado por mi que recibe parametros
        Detecto ls parametros automaticamente
        :param param1: Este es el parametro numero 1
        :param param2: Este es el parametro numero 2
        :return: Este es el valor de retorno
        """
----------------------------------------------------------------------------------------------------------------------------
#5.2 Dunder doc (__doc__) -> parte 1 y 2
#Bruno Marchetti
from mi_clase import MiClase

# help devuelve la documentacion de la clase
# help(MiClase)

# print(MiClase.__doc__)
# print(MiClase.__init__.__doc__)
# print(MiClase.mi_metodo.__doc__)  # cada metodo en si mismo es un objet
print(MiClase.mi_metodo)
print(type(MiClase.mi_metodo))
----------------------------------------------------------------------------------------------------------------------------

# 5.3STRING INMUTABLES - Las variables que tienen cadenas, no pueden modificarse.
#Bruno Marchetti
# help(str.capitalize) # convierte el primer caracter a mayúscula

mensaje1 = "hola mundo"
mensaje2 = mensaje1.capitalize() # debería poner la H en mayúscula pero NO la modifica
# Lo que hace es crear en mensaje2 una cadena nueva, no modificar la de mensaje1

print(f'Mensaje1: {mensaje1}, id: {id(mensaje1)}') # vemos el id interno PARA ESTA VARIABLE
print(f'Mensaje2: {mensaje2}, id: {id(mensaje2)}') # id distinto, SON DOS OBJETOS DISTINTOS

mensaje1 += ' Adiós' # es una nueva cadena
print(f'Mensaje1: {mensaje1}, id: {id(mensaje1)}') # VEMOS EL ID DE ESA NUEVA CADENA
---------------------------------------------------------------------------------------------------------------------------
#5.4 Método join para colecciones a cadenas -> Parte 1 y 2
#Bruno Marchetti
# help(str.join)

tupla_str = ('Hola', 'alumnos', 'Tecnicatura', 'Universitaria') # tupla con 4 elementos
mensaje = ' '.join(tupla_str) # crea una nueva cadena uniendo espacios entre las palabras
print(f'Mensaje: {mensaje}') # devuelve una sola cadena

lista_cursos = ['Java', 'Python', 'Angular', 'Spring']
mensaje = ', '.join(lista_cursos)
print(f'Mensaje: {mensaje}')

cadena = 'HolaMundo'
mensaje = '.'.join(cadena)
print(f'Mensaje: {mensaje}')

diccionario = {'nombre': 'Juan', 'apellido': 'Perez', 'edad': '18'}
llaves = '-'.join(diccionario.keys())
valores = '-'.join(diccionario.values())
print(f'Llaves: {llaves}, Type: {type(llaves)}')
print(f'Valores: {valores}, Type: {type(valores)}')
---------------------------------------------------------------------------------------------------------------------------
#5.5 Método split cadena a lista -> Parte 1 y 2
#Bruno Marchetti
cursos_separados_coma = 'Java,Python,Node,Javascript,Spring'
lista_cursos = cursos_separados_coma.split(',', 2)
print(f'Lista de cursos: {lista_cursos}')
print(type(lista_cursos))

cursos_separados_coma = 'Java,Python,Node,Javascript,Spring'
lista_cursos = cursos_separados_coma.split(',', 2)
print(f'Lista de cursos: {lista_cursos}')
print(len(lista_cursos))
