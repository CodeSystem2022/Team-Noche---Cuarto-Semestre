#11.1
# Marino Alfredo
import random


def choose_options():
    options = ('piedra', 'papel', 'tijera')
    user_option = input('    piedra, papel o tijera -> ')
    user_option = user_option.lower()

    if not user_option in options:
        print('!!! Esa opcion no es valida')
        # continue
        return None, None

    computer_option = random.choice(options)

    print('')
    print('Oponente =>', computer_option)
    return user_option, computer_option


def check_rules(user_option, computer_option, user_wins, computer_wins):
    if user_option == computer_option:
        print('¡Empate!')
    elif user_option == 'piedra':
        if computer_option == 'tijera':
            print('piedra gana a tijera')
            print('-> USUARIO ¡GANA!')
            user_wins += 1
        else:
            print('Papel gana a piedra')
            print('-> OPONENTE ¡GANA!')
            computer_wins += 1
    elif user_option == 'papel':
        if computer_option == 'piedra':
            print('papel gana a piedra')
            print('-> USUARIO ¡GANA!')
            user_wins += 1
        else:
            print('tijera gana a papel')
            print('-> OPONENTE ¡GANA!')
            computer_wins += 1
    elif user_option == 'tijera':
        if computer_option == 'papel':
            print('tijera gana a papel')
            print('-> USUARIO ¡GANA!')
            user_wins += 1
        else:
            print('piedra gana a tijera')
            print('-> OPONENTE ¡GANA!')
            computer_wins += 1
    return user_wins, computer_wins


def run_game():
    computer_wins = 0
    user_wins = 0
    rounds = 1
    while True:
        print('\n')
        print('       ***********')
        print(f"       * ROUND {rounds} *")
        print('       ***********')
        print(f"Oponente  {computer_wins} - {user_wins}  Usuario\n")
        rounds += 1

        user_option, computer_option = choose_options()
        user_wins, computer_wins = check_rules(
            user_option, computer_option, user_wins, computer_wins)

        if computer_wins == 2:
            print('=========================')
            print('El CAMPEON es el OPONENTE')
            print('-------------------------\n')
            break

        if user_wins == 2:
            print('=========================')
            print('El CAMPEON es el USUARIO')
            print('-------------------------\n')
            break


run_game()

#11.3

import utils
import read_csv
import charts

def run():
    data = read_csv.read_csv('.app/data.csv') #leemos el csv, gracias al módulo línea 2
    data = list(filter(lambda item : item['Continent'] == 'South America', data))
    
    countries = list(map(lambda x: x['Country'], data))
    percentages = list(map(lambda x: x['World Population Percentage'], data))
    charts.generate_pie_chart(countries, percentages)
    country = input('Type Country => ')
    print(country)

    result = utils.population_by_country(data, country)

    if len(result) > 0:
    country = result[0]
    print(country)
    labels, values = utils.get_population(country)
    charts.generate_bar_chart(country['Country'], labels, values)

if __name__ == '__main__':
  run()

#11.5
from typing import List
import charts
import read_csv
import utils

def run():
    data = read_csv.read_csv('./data.csv')  # Leemos el csv
    data = List(List(filter(lambda item: item['Continent'] == 'South America', data)))


    countries = List(map(lambda x: x['Country'], data))
    percentages = List(map(lambda x : x['World Population Percentage']))
    charts.generate_pie_chart(countries, percentages)

    country = input('Type country => ')
    print(country)

    result = utils.population_by_country(data,country)

    if len(result >0) :
       country = result[0] #sobreescribimos la variable
       print(country) #visualizamos el diccionario
       labels, values = utils.get_population(country) #recibimos la población
       charts.generate_bar_chart(country['Country'], labels, values)

    
if __name__ == '__main__':
    run()

import matplotlib.pyplot as plt 

def generate_bar_chart(name, Labels, values):
    fig, ax = plt.subplots()
    ax.bar(labels, values)
    plt.savefig(f'./imgs/{name}.png')
    plt.close()

def generate_pie_chart(Labels, values):
    fix, ax = plt.subplots()
    ax.pie(values, Labels=labels)
    ax.axis('equal')
    plt.savefig('bar.png')
    plt.close()

if __name__ == '__main__':
    labels = ['a', 'b', 'c']
    values = [10, 40, 400]
    
    #generate_bar_chart(labels, values)

    generate_pie_chart(labels, values)
